//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
'use strict';

const thrift = require('../../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ttypes = require('./jaeger_types');
//HELPER FUNCTIONS AND STRUCTURES

var Agent_emitBatch_args = function (args) {
  this.batch = null;
  if (args) {
    if (args.batch !== undefined && args.batch !== null) {
      this.batch = new ttypes.Batch(args.batch);
    }
  }
};
Agent_emitBatch_args.prototype = {};
Agent_emitBatch_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.batch = new ttypes.Batch();
          this.batch.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Agent_emitBatch_args.prototype.write = function (output) {
  output.writeStructBegin('Agent_emitBatch_args');
  if (this.batch !== null && this.batch !== undefined) {
    output.writeFieldBegin('batch', Thrift.Type.STRUCT, 1);
    this.batch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Agent_emitBatch_result = function (args) {};
Agent_emitBatch_result.prototype = {};
Agent_emitBatch_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Agent_emitBatch_result.prototype.write = function (output) {
  output.writeStructBegin('Agent_emitBatch_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgentClient = (exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
});
AgentClient.prototype = {};
AgentClient.prototype.seqid = function () {
  return this._seqid;
};
AgentClient.prototype.new_seqid = function () {
  return (this._seqid += 1);
};

AgentClient.prototype.emitBatch = function (batch, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_emitBatch(batch);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_emitBatch(batch);
  }
};

AgentClient.prototype.send_emitBatch = function (batch) {
  var output = new this.pClass(this.output);
  var params = {
    batch: batch,
  };
  var args = new Agent_emitBatch_args(params);
  try {
    output.writeMessageBegin(
      'emitBatch',
      Thrift.MessageType.ONEWAY,
      this.seqid()
    );
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function () {};
    delete this._reqs[this.seqid()];
    callback(null);
  } catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};
var AgentProcessor = (exports.Processor = function (handler) {
  this._handler = handler;
});
AgentProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(
      Thrift.TApplicationExceptionType.UNKNOWN_METHOD,
      'Unknown function ' + r.fname
    );
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
AgentProcessor.prototype.process_emitBatch = function (seqid, input, output) {
  var args = new Agent_emitBatch_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.emitBatch(args.batch);
};
