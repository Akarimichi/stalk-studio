//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
'use strict';

// var thrift = require('thrift');
const thrift = require('../../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ttypes = require('./jaeger_types');
//HELPER FUNCTIONS AND STRUCTURES

var Collector_submitBatches_args = function (args) {
  this.batches = null;
  if (args) {
    if (args.batches !== undefined && args.batches !== null) {
      this.batches = Thrift.copyList(args.batches, [ttypes.Batch]);
    }
  }
};
Collector_submitBatches_args.prototype = {};
Collector_submitBatches_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          this.batches = [];
          var _rtmp331 = input.readListBegin();
          var _size30 = _rtmp331.size || 0;
          for (var _i32 = 0; _i32 < _size30; ++_i32) {
            var elem33 = null;
            elem33 = new ttypes.Batch();
            elem33.read(input);
            this.batches.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Collector_submitBatches_args.prototype.write = function (output) {
  output.writeStructBegin('Collector_submitBatches_args');
  if (this.batches !== null && this.batches !== undefined) {
    output.writeFieldBegin('batches', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.batches.length);
    for (var iter34 in this.batches) {
      if (this.batches.hasOwnProperty(iter34)) {
        iter34 = this.batches[iter34];
        iter34.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Collector_submitBatches_result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [
        ttypes.BatchSubmitResponse,
      ]);
    }
  }
};
Collector_submitBatches_result.prototype = {};
Collector_submitBatches_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          var _rtmp336 = input.readListBegin();
          var _size35 = _rtmp336.size || 0;
          for (var _i37 = 0; _i37 < _size35; ++_i37) {
            var elem38 = null;
            elem38 = new ttypes.BatchSubmitResponse();
            elem38.read(input);
            this.success.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Collector_submitBatches_result.prototype.write = function (output) {
  output.writeStructBegin('Collector_submitBatches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success) {
      if (this.success.hasOwnProperty(iter39)) {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CollectorClient = (exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
});
CollectorClient.prototype = {};
CollectorClient.prototype.seqid = function () {
  return this._seqid;
};
CollectorClient.prototype.new_seqid = function () {
  return (this._seqid += 1);
};

CollectorClient.prototype.submitBatches = function (batches, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitBatches(batches);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitBatches(batches);
  }
};

CollectorClient.prototype.send_submitBatches = function (batches) {
  var output = new this.pClass(this.output);
  var params = {
    batches: batches,
  };
  var args = new Collector_submitBatches_args(params);
  try {
    output.writeMessageBegin(
      'submitBatches',
      Thrift.MessageType.CALL,
      this.seqid()
    );
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CollectorClient.prototype.recv_submitBatches = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Collector_submitBatches_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('submitBatches failed: unknown result');
};
var CollectorProcessor = (exports.Processor = function (handler) {
  this._handler = handler;
});
CollectorProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(
      Thrift.TApplicationExceptionType.UNKNOWN_METHOD,
      'Unknown function ' + r.fname
    );
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
CollectorProcessor.prototype.process_submitBatches = function (
  seqid,
  input,
  output
) {
  var args = new Collector_submitBatches_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitBatches.length === 1) {
    Q.fcall(this._handler.submitBatches.bind(this._handler), args.batches)
      .then(function (result) {
        var result_obj = new Collector_submitBatches_result({
          success: result,
        });
        output.writeMessageBegin(
          'submitBatches',
          Thrift.MessageType.REPLY,
          seqid
        );
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      })
      .catch(function (err) {
        var result;
        result = new Thrift.TApplicationException(
          Thrift.TApplicationExceptionType.UNKNOWN,
          err.message
        );
        output.writeMessageBegin(
          'submitBatches',
          Thrift.MessageType.EXCEPTION,
          seqid
        );
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitBatches(args.batches, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined') {
        result_obj = new Collector_submitBatches_result(
          err !== null || typeof err === 'undefined' ? err : { success: result }
        );
        output.writeMessageBegin(
          'submitBatches',
          Thrift.MessageType.REPLY,
          seqid
        );
      } else {
        result_obj = new Thrift.TApplicationException(
          Thrift.TApplicationExceptionType.UNKNOWN,
          err.message
        );
        output.writeMessageBegin(
          'submitBatches',
          Thrift.MessageType.EXCEPTION,
          seqid
        );
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
