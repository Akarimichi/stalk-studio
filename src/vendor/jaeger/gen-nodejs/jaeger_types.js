//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('../../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.TagType = {
  'STRING' : 0,
  'DOUBLE' : 1,
  'BOOL' : 2,
  'LONG' : 3,
  'BINARY' : 4
};
ttypes.SpanRefType = {
  'CHILD_OF' : 0,
  'FOLLOWS_FROM' : 1
};
var Tag = module.exports.Tag = function(args) {
  this.key = null;
  this.vType = null;
  this.vStr = null;
  this.vDouble = null;
  this.vBool = null;
  this.vLong = null;
  this.vBinary = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.vType !== undefined && args.vType !== null) {
      this.vType = args.vType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vType is unset!');
    }
    if (args.vStr !== undefined && args.vStr !== null) {
      this.vStr = args.vStr;
    }
    if (args.vDouble !== undefined && args.vDouble !== null) {
      this.vDouble = args.vDouble;
    }
    if (args.vBool !== undefined && args.vBool !== null) {
      this.vBool = args.vBool;
    }
    if (args.vLong !== undefined && args.vLong !== null) {
      this.vLong = args.vLong;
    }
    if (args.vBinary !== undefined && args.vBinary !== null) {
      this.vBinary = args.vBinary;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.vType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.vDouble = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.vBool = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.vLong = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.vBinary = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.vType !== null && this.vType !== undefined) {
    output.writeFieldBegin('vType', Thrift.Type.I32, 2);
    output.writeI32(this.vType);
    output.writeFieldEnd();
  }
  if (this.vStr !== null && this.vStr !== undefined) {
    output.writeFieldBegin('vStr', Thrift.Type.STRING, 3);
    output.writeString(this.vStr);
    output.writeFieldEnd();
  }
  if (this.vDouble !== null && this.vDouble !== undefined) {
    output.writeFieldBegin('vDouble', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.vDouble);
    output.writeFieldEnd();
  }
  if (this.vBool !== null && this.vBool !== undefined) {
    output.writeFieldBegin('vBool', Thrift.Type.BOOL, 5);
    output.writeBool(this.vBool);
    output.writeFieldEnd();
  }
  if (this.vLong !== null && this.vLong !== undefined) {
    output.writeFieldBegin('vLong', Thrift.Type.I64, 6);
    output.writeI64(this.vLong);
    output.writeFieldEnd();
  }
  if (this.vBinary !== null && this.vBinary !== undefined) {
    output.writeFieldBegin('vBinary', Thrift.Type.STRING, 7);
    output.writeBinary(this.vBinary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Log = module.exports.Log = function(args) {
  this.timestamp = null;
  this.fields = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [ttypes.Tag]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
  }
};
Log.prototype = {};
Log.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.fields = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.Tag();
          elem3.read(input);
          this.fields.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Log.prototype.write = function(output) {
  output.writeStructBegin('Log');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter4 in this.fields) {
      if (this.fields.hasOwnProperty(iter4)) {
        iter4 = this.fields[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SpanRef = module.exports.SpanRef = function(args) {
  this.refType = null;
  this.traceIdLow = null;
  this.traceIdHigh = null;
  this.spanId = null;
  if (args) {
    if (args.refType !== undefined && args.refType !== null) {
      this.refType = args.refType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refType is unset!');
    }
    if (args.traceIdLow !== undefined && args.traceIdLow !== null) {
      this.traceIdLow = args.traceIdLow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceIdLow is unset!');
    }
    if (args.traceIdHigh !== undefined && args.traceIdHigh !== null) {
      this.traceIdHigh = args.traceIdHigh;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceIdHigh is unset!');
    }
    if (args.spanId !== undefined && args.spanId !== null) {
      this.spanId = args.spanId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spanId is unset!');
    }
  }
};
SpanRef.prototype = {};
SpanRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.refType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.traceIdLow = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.traceIdHigh = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpanRef.prototype.write = function(output) {
  output.writeStructBegin('SpanRef');
  if (this.refType !== null && this.refType !== undefined) {
    output.writeFieldBegin('refType', Thrift.Type.I32, 1);
    output.writeI32(this.refType);
    output.writeFieldEnd();
  }
  if (this.traceIdLow !== null && this.traceIdLow !== undefined) {
    output.writeFieldBegin('traceIdLow', Thrift.Type.I64, 2);
    output.writeI64(this.traceIdLow);
    output.writeFieldEnd();
  }
  if (this.traceIdHigh !== null && this.traceIdHigh !== undefined) {
    output.writeFieldBegin('traceIdHigh', Thrift.Type.I64, 3);
    output.writeI64(this.traceIdHigh);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 4);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Span = module.exports.Span = function(args) {
  this.traceIdLow = null;
  this.traceIdHigh = null;
  this.spanId = null;
  this.parentSpanId = null;
  this.operationName = null;
  this.references = null;
  this.flags = null;
  this.startTime = null;
  this.duration = null;
  this.tags = null;
  this.logs = null;
  if (args) {
    if (args.traceIdLow !== undefined && args.traceIdLow !== null) {
      this.traceIdLow = args.traceIdLow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceIdLow is unset!');
    }
    if (args.traceIdHigh !== undefined && args.traceIdHigh !== null) {
      this.traceIdHigh = args.traceIdHigh;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceIdHigh is unset!');
    }
    if (args.spanId !== undefined && args.spanId !== null) {
      this.spanId = args.spanId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spanId is unset!');
    }
    if (args.parentSpanId !== undefined && args.parentSpanId !== null) {
      this.parentSpanId = args.parentSpanId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parentSpanId is unset!');
    }
    if (args.operationName !== undefined && args.operationName !== null) {
      this.operationName = args.operationName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationName is unset!');
    }
    if (args.references !== undefined && args.references !== null) {
      this.references = Thrift.copyList(args.references, [ttypes.SpanRef]);
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flags is unset!');
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTime is unset!');
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field duration is unset!');
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.logs !== undefined && args.logs !== null) {
      this.logs = Thrift.copyList(args.logs, [ttypes.Log]);
    }
  }
};
Span.prototype = {};
Span.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.traceIdLow = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.traceIdHigh = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.parentSpanId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.operationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.references = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.SpanRef();
          elem8.read(input);
          this.references.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.tags = [];
        var _rtmp310 = input.readListBegin();
        var _size9 = _rtmp310.size || 0;
        for (var _i11 = 0; _i11 < _size9; ++_i11) {
          var elem12 = null;
          elem12 = new ttypes.Tag();
          elem12.read(input);
          this.tags.push(elem12);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        this.logs = [];
        var _rtmp314 = input.readListBegin();
        var _size13 = _rtmp314.size || 0;
        for (var _i15 = 0; _i15 < _size13; ++_i15) {
          var elem16 = null;
          elem16 = new ttypes.Log();
          elem16.read(input);
          this.logs.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Span.prototype.write = function(output) {
  output.writeStructBegin('Span');
  if (this.traceIdLow !== null && this.traceIdLow !== undefined) {
    output.writeFieldBegin('traceIdLow', Thrift.Type.I64, 1);
    output.writeI64(this.traceIdLow);
    output.writeFieldEnd();
  }
  if (this.traceIdHigh !== null && this.traceIdHigh !== undefined) {
    output.writeFieldBegin('traceIdHigh', Thrift.Type.I64, 2);
    output.writeI64(this.traceIdHigh);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 3);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  if (this.parentSpanId !== null && this.parentSpanId !== undefined) {
    output.writeFieldBegin('parentSpanId', Thrift.Type.I64, 4);
    output.writeI64(this.parentSpanId);
    output.writeFieldEnd();
  }
  if (this.operationName !== null && this.operationName !== undefined) {
    output.writeFieldBegin('operationName', Thrift.Type.STRING, 5);
    output.writeString(this.operationName);
    output.writeFieldEnd();
  }
  if (this.references !== null && this.references !== undefined) {
    output.writeFieldBegin('references', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.references.length);
    for (var iter17 in this.references) {
      if (this.references.hasOwnProperty(iter17)) {
        iter17 = this.references[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 7);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 9);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter18 in this.tags) {
      if (this.tags.hasOwnProperty(iter18)) {
        iter18 = this.tags[iter18];
        iter18.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.logs !== null && this.logs !== undefined) {
    output.writeFieldBegin('logs', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.logs.length);
    for (var iter19 in this.logs) {
      if (this.logs.hasOwnProperty(iter19)) {
        iter19 = this.logs[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Process = module.exports.Process = function(args) {
  this.serviceName = null;
  this.tags = null;
  if (args) {
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serviceName is unset!');
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
  }
};
Process.prototype = {};
Process.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tags = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.Tag();
          elem23.read(input);
          this.tags.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Process.prototype.write = function(output) {
  output.writeStructBegin('Process');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter24 in this.tags) {
      if (this.tags.hasOwnProperty(iter24)) {
        iter24 = this.tags[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientStats = module.exports.ClientStats = function(args) {
  this.fullQueueDroppedSpans = null;
  this.tooLargeDroppedSpans = null;
  this.failedToEmitSpans = null;
  if (args) {
    if (args.fullQueueDroppedSpans !== undefined && args.fullQueueDroppedSpans !== null) {
      this.fullQueueDroppedSpans = args.fullQueueDroppedSpans;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fullQueueDroppedSpans is unset!');
    }
    if (args.tooLargeDroppedSpans !== undefined && args.tooLargeDroppedSpans !== null) {
      this.tooLargeDroppedSpans = args.tooLargeDroppedSpans;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tooLargeDroppedSpans is unset!');
    }
    if (args.failedToEmitSpans !== undefined && args.failedToEmitSpans !== null) {
      this.failedToEmitSpans = args.failedToEmitSpans;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field failedToEmitSpans is unset!');
    }
  }
};
ClientStats.prototype = {};
ClientStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.fullQueueDroppedSpans = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.tooLargeDroppedSpans = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.failedToEmitSpans = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientStats.prototype.write = function(output) {
  output.writeStructBegin('ClientStats');
  if (this.fullQueueDroppedSpans !== null && this.fullQueueDroppedSpans !== undefined) {
    output.writeFieldBegin('fullQueueDroppedSpans', Thrift.Type.I64, 1);
    output.writeI64(this.fullQueueDroppedSpans);
    output.writeFieldEnd();
  }
  if (this.tooLargeDroppedSpans !== null && this.tooLargeDroppedSpans !== undefined) {
    output.writeFieldBegin('tooLargeDroppedSpans', Thrift.Type.I64, 2);
    output.writeI64(this.tooLargeDroppedSpans);
    output.writeFieldEnd();
  }
  if (this.failedToEmitSpans !== null && this.failedToEmitSpans !== undefined) {
    output.writeFieldBegin('failedToEmitSpans', Thrift.Type.I64, 3);
    output.writeI64(this.failedToEmitSpans);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Batch = module.exports.Batch = function(args) {
  this.process = null;
  this.spans = null;
  this.seqNo = null;
  this.stats = null;
  if (args) {
    if (args.process !== undefined && args.process !== null) {
      this.process = new ttypes.Process(args.process);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field process is unset!');
    }
    if (args.spans !== undefined && args.spans !== null) {
      this.spans = Thrift.copyList(args.spans, [ttypes.Span]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spans is unset!');
    }
    if (args.seqNo !== undefined && args.seqNo !== null) {
      this.seqNo = args.seqNo;
    }
    if (args.stats !== undefined && args.stats !== null) {
      this.stats = new ttypes.ClientStats(args.stats);
    }
  }
};
Batch.prototype = {};
Batch.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.process = new ttypes.Process();
        this.process.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.spans = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.Span();
          elem28.read(input);
          this.spans.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.seqNo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.stats = new ttypes.ClientStats();
        this.stats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Batch.prototype.write = function(output) {
  output.writeStructBegin('Batch');
  if (this.process !== null && this.process !== undefined) {
    output.writeFieldBegin('process', Thrift.Type.STRUCT, 1);
    this.process.write(output);
    output.writeFieldEnd();
  }
  if (this.spans !== null && this.spans !== undefined) {
    output.writeFieldBegin('spans', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.spans.length);
    for (var iter29 in this.spans) {
      if (this.spans.hasOwnProperty(iter29)) {
        iter29 = this.spans[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.seqNo !== null && this.seqNo !== undefined) {
    output.writeFieldBegin('seqNo', Thrift.Type.I64, 3);
    output.writeI64(this.seqNo);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.STRUCT, 4);
    this.stats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchSubmitResponse = module.exports.BatchSubmitResponse = function(args) {
  this.ok = null;
  if (args) {
    if (args.ok !== undefined && args.ok !== null) {
      this.ok = args.ok;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ok is unset!');
    }
  }
};
BatchSubmitResponse.prototype = {};
BatchSubmitResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.ok = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchSubmitResponse.prototype.write = function(output) {
  output.writeStructBegin('BatchSubmitResponse');
  if (this.ok !== null && this.ok !== undefined) {
    output.writeFieldBegin('ok', Thrift.Type.BOOL, 1);
    output.writeBool(this.ok);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

